from typing import Dict, Any, List
from langchain.tools import Tool
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langgraph.prebuilt import create_react_agent
from src.models.llm_config import get_llm
from src.tools.course_retriever import CourseRetriever
from src.tools.interest_extractor import extract_interests
from src.tools.conversation_manager import generate_discovery_response, generate_course_recommendation
from src.schema.state import CourseRecommenderState

class CourseRecommenderAgent:
    """ReAct agent for course recommendations."""
    
    def __init__(self, course_retriever: CourseRetriever):
        self.llm = get_llm()
        self.course_retriever = course_retriever
        self.tools = self._create_tools()
        self.agent = self._create_agent()
    
    def _create_tools(self) -> List[Tool]:
        """Create tools for the agent."""
        
        def retrieve_courses_tool(query: str) -> str:
            """Retrieve relevant courses."""
            docs = self.course_retriever.search_courses(query)
            return "\n\n".join([doc.page_content for doc in docs])
        
        def extract_interests_tool(state: Dict[str, Any]) -> str:
            """Extract interests from conversation."""
            interests = extract_interests.invoke({"messages": state["messages"]})
            return f"Extracted interests: {', '.join(interests) if interests else 'none'}"
        
        def discovery_response_tool(state: Dict[str, Any]) -> str:
            """Generate discovery conversation response."""
            return generate_discovery_response.invoke({
                "messages": state["messages"],
                "grade": state["grade"],
                "interests": state["interests"]
            })
        
        def recommendation_tool(state: Dict[str, Any]) -> str:
            """Generate course recommendations."""
            query = f"courses for grade {state['grade']} interested in {', '.join(state['interests'])}"
            course_context = retrieve_courses_tool(query)

            if not course_context.strip():
                return "I couldn’t find any matching courses right now, but we can keep chatting to explore more of your interests!"

            return generate_course_recommendation.invoke({
                "query": state["messages"][-1].content if state["messages"] else "",
                "grade": state["grade"],
                "interests": state["interests"],
                "credit_preference": state.get("credit_preference", "any"),
                "course_context": course_context
            })
        
        return [
            Tool(
                name="retrieve_courses",
                description="Retrieve relevant courses based on a search query",
                func=retrieve_courses_tool
            ),
            Tool(
                name="extract_interests",
                description="Extract student interests from conversation history",
                func=extract_interests_tool
            ),
            Tool(
                name="discovery_response",
                description="Generate a conversational response to discover student interests",
                func=discovery_response_tool
            ),
            Tool(
                name="course_recommendation",
                description="Generate course recommendations based on student profile",
                func=recommendation_tool
            )
        ]
    
    def _create_agent(self):
        """Create the ReAct agent with a custom system message."""
        system_message_a = """
            You are an educational counselor who helps students find interesting courses through friendly conversation.

            ## Behavior Strategy:
            1. Begin by chatting naturally to build rapport — ask about the student's day, hobbies, what they’ve been up to lately.
            2. As the conversation continues, extract interests using the `extract_interests` tool.
            3. If interests are available and the user seems curious or open, use `course_recommendation` to suggest personalized options.
            4. If no courses are found, acknowledge it politely and keep chatting to discover new interests.
            5. If the student continues chatting, go back to discovery and repeat the cycle when relevant.

            ## Rules:
            - NEVER mention or suggest courses unless the `conversation_stage` is "recommendation".
            - Do NOT use your own knowledge — always rely on tools for course suggestions.
            - Stay friendly, age-appropriate, and support curiosity.
            - No scripted responses — every message should be generated by the LLM or tools.
            - When unsure, keep the conversation going by asking thoughtful or light daily-life questions.

            ## Available Tools:
            - retrieve_courses: Retrieve relevant courses based on a topic
            - extract_interests: Extract interests from messages
            - discovery_response: Generate light, natural conversation responses to keep the student engaged
            - course_recommendation: Recommend courses if interest and context are available
        """

        prompt = ChatPromptTemplate.from_messages([
            ("system", system_message_a),
            MessagesPlaceholder(variable_name="messages")
        ])

        return create_react_agent(
            self.llm,
            self.tools,
            prompt=prompt 
        )
        
    def process_message(self, state: CourseRecommenderState) -> Dict[str, Any]:
        """Process a message through the agent."""
        try:
            result = self.agent.invoke(state)
            
            if "messages" in result and result["messages"]:
                last_message = result["messages"][-1]
                response = getattr(last_message, 'content', str(last_message))
            else:
                response = "Hmm, it seems quiet. Want to tell me about your favorite way to relax or have fun?"

            return {
                "response": response,
                "updated_state": result
            }
            
        except Exception as e:
            print(f"Error in agent processing: {e}")
            return {
                "response": "I'm having a moment of confusion. Could you tell me what subjects or activities you enjoy?",
                "updated_state": state
            }
